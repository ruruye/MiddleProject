# Root logger option

# 1. 로그 출력 Level 정하기 ==> DEBUG
# 2. rootLogger에 사용할 로킹 Appender로 stdout이라는 것과 logfile이라는 것, 두 가지를 사용하겠다.
#    logfile은 파일에 로그를 출력하는 appender입니다.
#log4j.rootLogger=debug, stdout, logfile
#log4j.rootLogger=trace, stdout

# Direct log messages to stdout
# ConversionPattern은 로그가 어떠한 형식으로 출력될 것인지 그 포맷을 정의하는 것
# ConversionPattern은 로그 출력 형식을 지정합니다. %5p는 로그 레벨, %F는 파일 이름, %C{2}는 클래스 이름, %L은 줄 번호, %m은 메시지입니다.
log4j.appender.stdout=org.apache.log4j.ConsoleAppender
log4j.appender.stdout.Target=System.out
log4j.appender.stdout.layout=org.apache.log4j.PatternLayout
log4j.appender.stdout.layout.ConversionPattern=%5p %F-(%C{2}:%L) - %m%n


log4j.appender.console=org.apache.log4j.ConsoleAppender
log4j.appender.console.layout=org.apache.log4j.PatternLayout
log4j.appender.console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss} [%t] %-5p %c{3} - %m%n

log4j.logger.kr.or.ddit.basic.logging.SimpleLog=INFO
log4j.rootLogger=trace, stdout


# Direct log message to log file
# Logfule이라는 Appender는 로그를 파일로 출력해주는 Appender이다.
# 여기에는 파일 경로를 지정할 수 있다.
log4j.appender.logfile=org.apache.log4j.DailyRollingFileAppender
log4j.appender.logfile.DatePattern='.'yyyy-MM-dd
log4j.appender.logfile.File=D:/application.log
log4j.appender.logfile.layout=org.apache.log4j.PatternLayout
log4j.appender.logfile.layout.ConversionPattern=[%d{yyyy-MM-dd HH:mm:ss}] %5p (%C{2} - %M:%L) - %m%n
log4j.appender.logfile.Append=true


